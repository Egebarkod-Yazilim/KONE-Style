@model PagedList.PagedList<Konfrut.Entity.Concrete.Product>
@{
    Layout = "_Layout";
}

@await Html.PartialAsync("_Breadcrumb", new Konfrut.KOne.WebUI.Models.BreadCrumb.BreadCrumbViewModel
{
    HeaderTitle = "Index",
    PageNames = new List<string>() { "Admin", "Home", "Index" },
    Url = "/Admin/Home/Index"
})

<div id="toastContainer"></div>
<div class="row">
    <div class="col-md-12">
     
    </div>
</div>

@await Component.InvokeAsync("CbsApiViewComponent")


@section Styles{
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
}
@section Scripts{
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
        $(document).ready(function () {

            //$('#datatable thead tr').clone(true).appendTo('#datatable thead');
            var datatable = $('#datatable').DataTable({
                "ajax": {
                    "url": "/Home/GetProducts",
                    "type": "GET",
                    "datatype": "json"
                },
                "columns": [
                    { "data": null, "orderable": false },
                    { "data": "id" },
                    { "data": "title" },
                    { "data": "name" },
                    { "data": "price" },
                    { "data": "quantity" },
                    { "data": "isActive" },
                ],
                "columnDefs": [
                    {
                        "targets": 0,
                        "render": function (data, type, row, meta) {
                            return '<div class="form-check form-check-md d-flex align-items-center"><input class="form-check-input" type = "checkbox" value ="' + data.Id + '" id="checkebox-md"></div >';
                        }
                    },
                    {
                        "targets": [6],
                        "render": function (data, type, row, meta) {
                            if (data === true) {
                                return '<span class="badge bg-success-transparent"><svg class="flex-shrink-0 me-2 svg-success" xmlns="http://www.w3.org/2000/svg" height="1rem" viewBox="0 0 24 24" width="1rem" fill="#000000"><path d="M0 0h24v24H0V0zm0 0h24v24H0V0z" fill="none"></path><path d="M16.59 7.58L10 14.17l-3.59-3.58L5 12l5 5 8-8zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"></path></svg> Evet</span>';
                            } else if (data === false) {
                                return '<span class="badge bg-warning-transparent"><svg class="flex-shrink-0 me-2 svg-warning" xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height="1rem" viewBox="0 0 24 24" width="1rem" fill="#000000"><g><rect fill="none" height="24" width="24"></rect></g><g><g><g><path d="M15.73,3H8.27L3,8.27v7.46L8.27,21h7.46L21,15.73V8.27L15.73,3z M19,14.9L14.9,19H9.1L5,14.9V9.1L9.1,5h5.8L19,9.1V14.9z"></path><rect height="6" width="2" x="11" y="7"></rect><rect height="2" width="2" x="11" y="15"></rect></g></g></g></svg> Hayır</span>';
                            } else {
                                return '<span class="badge bg-warning-transparent">Hayır</span>';
                            }
                        }
                    },
                    {
                        "targets": [7],
                        "render": function (data, type, row, meta) {
                            return '<div class="hstack gap-2">' +
                                '<a aria-label="anchor" href="javascript:void(0);" class="btn btn-icon btn-wave waves-effect waves-light btn-sm btn-success-light"><i class="ri-download-2-line"></i></a>' +
                                '<a aria-label="anchor" href="javascript:void(0);" class="btn btn-icon btn-wave waves-effect waves-light btn-sm btn-primary-light"><i class="ri-edit-line"></i></a>' +
                                '</div>';
                        }
                    },
                ],
                "orderCellsTop": true,
                "fixedHeader": true,
                "pageLength": 25,
                "pagingType": "full_numbers", // Tüm sayfaları göster
                "lengthMenu": [[25, 50, 100, -1], [25, 50, 100, "Tümü"]],
                language: {
                    "url": "https://cdn.datatables.net/plug-ins/1.12.0/i18n/tr.json"
                }
            });

            $('#datatable thead th').each(function () {
                var title = $(this).text();
                var classList = $(this).attr('class'); // Öğenin sınıf listesini al

                if (classList && classList.indexOf('nonsearchable') !== -1) {
                    $(this).text("");
                } else {
                    $(this).html('<input type="text" class="form-control rounded-pill" placeholder="' + title + '" />');

                    $('input', this).on('keyup change', function () {
                        if (datatable.column(i).search() !== this.value) {
                            datatable
                                .column(i)
                                .search(this.value)
                                .draw();
                        }
                    });
                }
            });

            $('.select2').select2();

            // Harita oluşturma
            var map = L.map('map').setView([39.9334, 32.8597], 10);


            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);


            var geojsonLayer;
            toastr.options = {
                "closeButton": true,
                "debug": false,
                "newestOnTop": false,
                "progressBar": true,
                "positionClass": "toast-top-right",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            };
            $('#selectedProvinceId').change(function () {
               

                toastr.info('Bu işlem biraz vakit alabilir. Sistemde olmayan veriler Tapu kadastro parsel sorgulama sistmeinden çekilirken, olan veriler sistemden çekilmektedir. İşlem bitince ilçeler dolacaktır.','Veriler Çekiliyor!');

                var selectElement1 = $('#selectedDistrictId');
                selectElement1.empty();
                var selectElement2 = $('#selectedVillageId');
                selectElement2.empty();

                var selectedId = $(this).val();
                // Fetch city data from API
                $.ajax({
                    url: '/Home/GetProvinceCoordinates', // API endpoint
                    data: { provinceId: selectedId },
                    method: 'GET',
                    success: function (response) {
                        // Clear previous layers if any
                        if (geojsonLayer && map.hasLayer(geojsonLayer)) {
                            map.removeLayer(geojsonLayer);
                        }

                        // Draw polygons
                        var geojsonFeature = response;

                        geojsonLayer = L.geoJSON(geojsonFeature, {
                            style: function (feature) {
                                console.log(feature);
                                return {
                                    fillColor: '#FF0000', // Change fill color as needed
                                    weight: 1,
                                    opacity: 1,
                                    color: 'red',
                                    fillOpacity: 0.1
                                };
                            }
                        }).addTo(map);

                        // Zoom to fit the bounds of the drawn polygon
                        map.fitBounds(geojsonLayer.getBounds());

                        
                    },
                    error: function (error) {
                        toastr.warning('İl kordinatları getirilemedi.', 'İşlem Başarısız!');

                        console.error('Error fetching city data:', error);
                    }
                });


                $.ajax({
                    url: '/Home/DistrictList', // Replace with your API endpoint
                    data: { provinceId: selectedId },
                    method: 'GET',
                    success: function (response) {
                        console.log(response);

                        var selectElement = $('#selectedDistrictId');
                        selectElement.empty();

                        var features = response.features; // Veri dizisi

                        // Her bir öğe için döngü
                        features.forEach(function (feature) {
                            var id = feature.properties.id; // İlçe ID'si
                            var text = feature.properties.text; // İlçe adı

                            // Eğer ilçe adı null değilse, dropdown listesine ekle
                            if (text !== null) {
                                var option = $('<option></option>').attr('value', id).text(text);
                                selectElement.append(option);
                            }
                        });

                        toastr.success('İlçeler getirildi. Lütfen ilçe seçerek ilerleyiniz.', 'İşlem Başarılı!');
                    },
                    error: function (error) {
                        toastr.warning('İlçeler getirilemedi.', 'İşlem Başarısız!');
                        console.error('Error fetching city data:', error);
                    }
                });
            });



            $('#selectedDistrictId').change(function () {
                toastr.info('Bu işlem biraz vakit alabilir. Sistemde olmayan veriler Tapu kadastro parsel sorgulama sistmeinden çekilirken, olan veriler sistemden çekilmektedir. İşlem bitince mahalleler dolacaktır.', 'Veriler Çekiliyor!');

                var selectedId = $(this).val();
                // Fetch city data from API
                $.ajax({
                    url: '/Home/GetDistrictCoordinates', // API endpoint
                    data: { districtId: selectedId },
                    method: 'GET',
                    success: function (response) {
                        // Clear previous layers if any
                        if (geojsonLayer && map.hasLayer(geojsonLayer)) {
                            map.removeLayer(geojsonLayer);
                        }

                        // Draw polygons
                        var geojsonFeature = response;

                        geojsonLayer = L.geoJSON(geojsonFeature, {
                            style: function (feature) {
                                console.log(feature);
                                return {
                                    fillColor: '#FF0000', // Change fill color as needed
                                    weight: 1,
                                    opacity: 1,
                                    color: 'red',
                                    fillOpacity: 0.1
                                };
                            }
                        }).addTo(map);

                        // Zoom to fit the bounds of the drawn polygon
                        map.fitBounds(geojsonLayer.getBounds());
                    },
                    error: function (error) {
                        toastr.warning('İlçe Kordinatları getirilemedi.', 'İşlem Başarısız!');

                        console.error('Error fetching city data:', error);
                    }
                });


                $.ajax({
                    url: '/Home/VillageList', // Replace with your API endpoint
                    data: { districtId: selectedId },
                    method: 'GET',
                    success: function (response) {
                        console.log(response);

                        var selectElement = $('#selectedVillageId');
                        selectElement.empty();

                        var features = response.features; // Veri dizisi

                        // Her bir öğe için döngü
                        features.forEach(function (feature) {
                            var id = feature.properties.id; // İlçe ID'si
                            var text = feature.properties.text; // İlçe adı

                            // Eğer ilçe adı null değilse, dropdown listesine ekle
                            if (text !== null) {
                                var option = $('<option></option>').attr('value', id).text(text);
                                selectElement.append(option);
                            }
                        });

                        toastr.success('Mahalleler getirildi. Lütfen ilçe seçerek ilerleyiniz.', 'İşlem Başarılı!');
                    },
                    error: function (error) {
                        toastr.warning('Mahalleler getirilemedi.', 'İşlem Başarısız!');

                        console.error('Error fetching city data:', error);
                    }
                });
            });



            $('#selectedVillageId').change(function () {
                var selectedId = $(this).val();
                // Fetch city data from API
                $.ajax({
                    url: '/Home/GetVillageCoordinates', // API endpoint
                    data: { villageId: selectedId },
                    method: 'GET',
                    success: function (response) {
                        // Clear previous layers if any
                        if (geojsonLayer && map.hasLayer(geojsonLayer)) {
                            map.removeLayer(geojsonLayer);
                        }

                        // Draw polygons
                        var geojsonFeature = response;

                        geojsonLayer = L.geoJSON(geojsonFeature, {
                            style: function (feature) {
                                console.log(feature);
                                return {
                                    fillColor: '#FF0000', // Change fill color as needed
                                    weight: 1,
                                    opacity: 1,
                                    color: 'red',
                                    fillOpacity: 0.1
                                };
                            }
                        }).addTo(map);

                        // Zoom to fit the bounds of the drawn polygon
                        map.fitBounds(geojsonLayer.getBounds());
                    },
                    error: function (error) {
                        toastr.warning('Mahalle/Köy Kordinatları getirilemedi.', 'İşlem Başarısız!');
                        console.error('Error fetching city data:', error);
                    }
                });
            });

            $('#submitparcelformbutton').click(function (event) {
                console.log("tiklandi.");
                var villageId = $('#selectedVillageId').val();
                var parcelNo = $('#ParcelNo').val();
                var LandNo = $('#LandNo').val();
                $.ajax({
                    url: '/Home/GetParcelCoordinates', // API endpoint
                    data: { villageId: villageId, LandNo: LandNo, parcel: parcelNo },
                    method: 'GET',
                    success: function (response) {
                        console.log(response);

                        if (response.resultStatus === 1) {
                            toastr.warning('Parsel alanı bulunamadı.', 'İşlem Başarısız!');

                        } else {
                            // Clear previous layers if any
                            if (geojsonLayer && map.hasLayer(geojsonLayer)) {
                                map.removeLayer(geojsonLayer);
                            }

                            // Draw polygons
                            var geojsonFeature = response.data;

                            geojsonLayer = L.geoJSON(geojsonFeature, {
                                style: function (feature) {
                                    console.log(feature);
                                    return {
                                        fillColor: '#FF0000', // Change fill color as needed
                                        weight: 1,
                                        opacity: 1,
                                        color: 'red',
                                        fillOpacity: 0.1
                                    };
                                }
                            }).addTo(map);

                            // Zoom to fit the bounds of the drawn polygon
                            map.fitBounds(geojsonLayer.getBounds());

                            toastr.success('Ada/Parsel sorgusu başarıyla gerçekleştirilmiştir.', 'İşlem Başarılı!');

                        }

                        
                    },
                    error: function (error) {
                        toastr.warning('Parsel alanı bulunamadı.', 'İşlem Başarısız!');

                        console.error('Error fetching city data:', error);
                    }
                });
            });
        });
    </script>
}


